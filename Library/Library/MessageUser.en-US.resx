<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllMargin" xml:space="preserve">
    <value>All fields must be filled in!</value>
  </data>
  <data name="AllMarginRegisatration" xml:space="preserve">
    <value>All fields must be filled in!</value>
  </data>
  <data name="Apartment" xml:space="preserve">
    <value>Apartment</value>
  </data>
  <data name="BookAvailable" xml:space="preserve">
    <value>The availability of books at the moment: Yes</value>
  </data>
  <data name="BookAvailableNo" xml:space="preserve">
    <value>The availability of books at the moment: No</value>
  </data>
  <data name="BookFormular" xml:space="preserve">
    <value>Book</value>
  </data>
  <data name="BookNotReturned" xml:space="preserve">
    <value>The book can not be returned when it is issued!</value>
  </data>
  <data name="BookReturned" xml:space="preserve">
    <value>The book is returned</value>
  </data>
  <data name="BookReturnedSucc" xml:space="preserve">
    <value>The book was successfully returned.</value>
  </data>
  <data name="BookTitle" xml:space="preserve">
    <value>Book title</value>
  </data>
  <data name="Building" xml:space="preserve">
    <value>Building</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="CorrectDate" xml:space="preserve">
    <value>Enter the correct dates!</value>
  </data>
  <data name="CorrectLoginPassword" xml:space="preserve">
    <value>Check your data entry! Login and Password fields must be between 8 and 16 characters long. The Login field h must contain Russian letters. The Russian Password field must contain at least one uppercase English letter, one uppercase English letter, one uppercase Russian letter, one uppercase Russian letter, one digit, one special character. The Password and Repeat password fields must match.</value>
  </data>
  <data name="CounPriceAct" xml:space="preserve">
    <value>Copy price, RUB</value>
  </data>
  <data name="CountInstanceAct" xml:space="preserve">
    <value>Number of copies</value>
  </data>
  <data name="DatabaseSearch" xml:space="preserve">
    <value>Database search</value>
  </data>
  <data name="DatabaseSearchTochki" xml:space="preserve">
    <value>Database search...</value>
  </data>
  <data name="DataBirthday" xml:space="preserve">
    <value>Date of birth</value>
  </data>
  <data name="DateIssueBook" xml:space="preserve">
    <value>Date of issue of books</value>
  </data>
  <data name="DateReturnedBook" xml:space="preserve">
    <value>Date of return of books</value>
  </data>
  <data name="DateRistrationBook" xml:space="preserve">
    <value>Date registration book</value>
  </data>
  <data name="DeleteBookTitle" xml:space="preserve">
    <value>Delete data book</value>
  </data>
  <data name="DeleteEntryFormular" xml:space="preserve">
    <value>Deleting a form entry</value>
  </data>
  <data name="DeleteGenre" xml:space="preserve">
    <value>Deleting a book genre</value>
  </data>
  <data name="DeletePublishing" xml:space="preserve">
    <value>Removing a book publisher</value>
  </data>
  <data name="DeleteRegCard" xml:space="preserve">
    <value>Delete registration card</value>
  </data>
  <data name="DeleteUser" xml:space="preserve">
    <value>Delete user</value>
  </data>
  <data name="DeleteWiter" xml:space="preserve">
    <value>Delete writer</value>
  </data>
  <data name="DocumentCreateSucc" xml:space="preserve">
    <value>The document has been created successfully.</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="EnterDataBook" xml:space="preserve">
    <value>Enter the details of the book...</value>
  </data>
  <data name="EnterDataReader" xml:space="preserve">
    <value>Enter your registration card details...</value>
  </data>
  <data name="EnterDataUser" xml:space="preserve">
    <value>Enter your user information...</value>
  </data>
  <data name="EnterDataWriter" xml:space="preserve">
    <value>Enter the details of the writer...</value>
  </data>
  <data name="EnterDetailsBook" xml:space="preserve">
    <value>Enter the details of the book...</value>
  </data>
  <data name="EnterNameGenre" xml:space="preserve">
    <value>Enter the name of the genre...</value>
  </data>
  <data name="EnterPublishing" xml:space="preserve">
    <value>Enter the name of the publisher...</value>
  </data>
  <data name="ErrorInsertUpdateBook" xml:space="preserve">
    <value>The Year of publication, Number of pages, the Cost of the copy, the Total number of copies must be filled in with integers! Check your data entry!</value>
  </data>
  <data name="ErrorLoadingData" xml:space="preserve">
    <value>Error loading data from database!</value>
  </data>
  <data name="ErrorLoginAndPassord" xml:space="preserve">
    <value>User login and password verification failed!</value>
  </data>
  <data name="ErrorRegCard" xml:space="preserve">
    <value>Check your data entry! The passport Series and passport Number fields must contain 4 and 6 digits, respectively. Fields issued by Passport, City, Street must not contain other characters except Russian letters, numbers, dots, and hyphens. The e-mail address field must contain the @ sign and a period after it. The combination of the series and passport number, as well as the mobile phone number and e-mail address, must be unique to the data in the database.</value>
  </data>
  <data name="FilledIntegers" xml:space="preserve">
    <value>The House and Apartment fields must be filled with integers! Check your data entry!</value>
  </data>
  <data name="GenreBook" xml:space="preserve">
    <value>Genre</value>
  </data>
  <data name="HaveBook" xml:space="preserve">
    <value>Presence book</value>
  </data>
  <data name="HomePhone" xml:space="preserve">
    <value>Home phone number</value>
  </data>
  <data name="LetterPassLog" xml:space="preserve">
    <value>Login should not have Russian letters! The Russian password must have at least one uppercase English and Russian letters, one uppercase English and Russian letters, a number, a special character!</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="MinLengthPassLog" xml:space="preserve">
    <value>Login and password must have a minimum length of 8 characters!</value>
  </data>
  <data name="MobilePhone" xml:space="preserve">
    <value>Mobile phone number</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NeedSelectRow" xml:space="preserve">
    <value>To create a document, select the line!</value>
  </data>
  <data name="NoConnection" xml:space="preserve">
    <value>No connection!</value>
  </data>
  <data name="NoReader" xml:space="preserve">
    <value>The reader with these parameters is not registered in the library.</value>
  </data>
  <data name="NoReaderLibrary" xml:space="preserve">
    <value>The reader with these parameters is not registered in the library.</value>
  </data>
  <data name="NoUserLoginPassword" xml:space="preserve">
    <value>User with the given username and password not found! Check your data entry or register.</value>
  </data>
  <data name="NumberDaysIssue" xml:space="preserve">
    <value>Number of days of issue</value>
  </data>
  <data name="NumberISBN" xml:space="preserve">
    <value>Number ISBN</value>
  </data>
  <data name="NumberOfInstancesAvailable" xml:space="preserve">
    <value>Number of instances available</value>
  </data>
  <data name="NumberOfPages" xml:space="preserve">
    <value>Number of pages</value>
  </data>
  <data name="OnlyField" xml:space="preserve">
    <value>Only one field must be filled in!</value>
  </data>
  <data name="PassportFormular" xml:space="preserve">
    <value>Passport data of the reader</value>
  </data>
  <data name="PassportNumbers" xml:space="preserve">
    <value>Passport number</value>
  </data>
  <data name="PassportSeries" xml:space="preserve">
    <value>The passport series</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordRepeatPasswordMustMatch" xml:space="preserve">
    <value>The Password and Repeat password fields must match!</value>
  </data>
  <data name="Patronymic" xml:space="preserve">
    <value>Patronymic</value>
  </data>
  <data name="Post" xml:space="preserve">
    <value>Post</value>
  </data>
  <data name="PublicationDate" xml:space="preserve">
    <value>Publication date</value>
  </data>
  <data name="PublishingBook" xml:space="preserve">
    <value>Publishing</value>
  </data>
  <data name="QuestionChangeLanguage" xml:space="preserve">
    <value>Do you really want to change the interface language? The app will be restarted!</value>
  </data>
  <data name="QuestionDeleteBook" xml:space="preserve">
    <value>To remove these books</value>
  </data>
  <data name="QuestionDeleteFormular" xml:space="preserve">
    <value>To delete a record of the form of the reader</value>
  </data>
  <data name="QuestionDeleteGenre" xml:space="preserve">
    <value>To remove the genre of the book</value>
  </data>
  <data name="QuestionDeletePublishing" xml:space="preserve">
    <value>Remove book publisher</value>
  </data>
  <data name="QuestionDeleteRegCard" xml:space="preserve">
    <value>To remove a registration card</value>
  </data>
  <data name="QuestionDeleteUser" xml:space="preserve">
    <value>Remove user</value>
  </data>
  <data name="QuestionDeleteWriter" xml:space="preserve">
    <value>To remove the writer</value>
  </data>
  <data name="ReaderFormular" xml:space="preserve">
    <value>Reader</value>
  </data>
  <data name="ReaderNoReturnedBook" xml:space="preserve">
    <value>This reader has not yet returned the previously issued books.</value>
  </data>
  <data name="SearchserverMenu" xml:space="preserve">
    <value>Server definition...</value>
  </data>
  <data name="ServerSearch" xml:space="preserve">
    <value>Server search</value>
  </data>
  <data name="ServerSearchTochki" xml:space="preserve">
    <value>Server search...</value>
  </data>
  <data name="Street" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="SuccessfullyAuthoriz" xml:space="preserve">
    <value>You are logged in to the information system.</value>
  </data>
  <data name="SuccessfulRegistration" xml:space="preserve">
    <value>You have successfully registered in the information system! You have guest rights at the moment. Contact your system administrator to change your rights. Now go through the authorization to work with the information system.</value>
  </data>
  <data name="SummAct" xml:space="preserve">
    <value>Amount, RUB.</value>
  </data>
  <data name="Surname" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="TheCostOfInstance" xml:space="preserve">
    <value>The cost of instance</value>
  </data>
  <data name="TitleBookAct" xml:space="preserve">
    <value>Book title, author</value>
  </data>
  <data name="TitleError" xml:space="preserve">
    <value>Errors resulting from the operation of the information system</value>
  </data>
  <data name="TitleLibrary" xml:space="preserve">
    <value>Library</value>
  </data>
  <data name="TotalNumberOfInstances" xml:space="preserve">
    <value>Total number of instances</value>
  </data>
  <data name="UserAlreadyHave" xml:space="preserve">
    <value>A user with this login is already listed in the information system!</value>
  </data>
  <data name="UserAlreadyHavePas" xml:space="preserve">
    <value>A user with such a password is already registered in the information system!</value>
  </data>
  <data name="WhenGivePassport" xml:space="preserve">
    <value>When issued the passport</value>
  </data>
  <data name="WhoGivePassport" xml:space="preserve">
    <value>Who issued the passport</value>
  </data>
  <data name="WriterBook" xml:space="preserve">
    <value>Writer</value>
  </data>
  <data name="WrongFormatDate" xml:space="preserve">
    <value>Entered the wrong format dates!</value>
  </data>
  <data name="BookIssue" xml:space="preserve">
    <value>The book was successfully issued to the reader.</value>
  </data>
</root>